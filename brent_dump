te <class Functor>
		inline static double solve(const Functor& f,
								   const double initial_guess,
								   const double x1, const double x2,
								   const int max_iter,
								   const double tol,
								   bool verbose,
								   int & iterations_used, bool isTestRun, std::vector<std::pair<double,double>> & solution_path)
        {
			double eps = 3.0e-8;
			int iter;
			double a=x1,b=x2,c=x2,d=a,e=a,min1,min2;
			double fa=f(a),fb=f(b),fc,p,q,r,s,tol1,xm;
			
			if((fa > 0.0 && fb > 0.0) || (fa < 0.0 && fb < 0.0))
				return ErrorPolicy::handleBracketingFailure(a,b,fa,fb);
			
			fc = fb;
				
			addPointToVector(initial_guess,f(initial_guess),solution_path); // REMOVE FOR SPEED TESTS
			
			for(iter = 1; iter <= max_iter; iter++)
			{
				++iterations_used;
				if( (fb > 0.0 && fc > 0.0) || (fb < 0.0 && fc < 0.0)) 
				{
					c = a; fc = fa;
					e = d = b-a;
				}
				if( fabs(fc) < fabs(fb) ) 
				{
					a=b; 	b=c; 	c=a;
					fa=fb; 	fb=fc; 	fc=fa;
				}
				tol1=2.0*eps*fabs(b)+0.5*tol;
				//std::cout << tol1 << std::endl;
				xm = 0.5*(c-b);
				//if(fabs(xm) <= tol1 || fb == 0.0) return b;
				if(fabs(xm) <= tol1 || fabs(fb) <= tol1) return b;
				if(fabs(e) >= tol1 && fabs(fa) > fabs(fb)) 
				{
					s = fb/fa;
					if(a == c)
					{
						p=2.0*xm*s; q = 1.0-s;
					}
					else
					{
						q = fa/fc;
						r = fb/fc;
						p = s*(2.0*xm*q*(q-r)-(b-a)*(r-1.0));
						q=(q-1.0)*(r-1.0)*(s-1.0);
					}
					if(p > 0.0) q = -q;
					p = fabs(p);
					min1=3.0*xm*q-fabs(tol1*q);
					min2=fabs(e*q);
					if(2.0*p < (min1 < min2 ? min1 : min2)) 
					{
						e=d; d = p/q;
					}
					else
					{
						d=xm; e=d;
					}
				}
				else
				{
					d=xm; e=d;
				}
				a=b; fa=fb;
				if(fabs(d) > tol1)
					b += d;
				else
					b += sign(tol1,xm);
				fb = f(b);
				addPointToVector(b,fb,solution_path); // REMOVE FOR SPEED TESTS
				
				/*if(iter > 30)
				{
					std::string file_name = "functor_values.data";
					PrintFunctor<Functor>::printFunctorValues(f,100,file_name.c_str());
					return ErrorPolicy::handleTooManyIterationsNewton(b, max_iter, f(b));
				}*/
			}
			
			return ErrorPolicy::handleTooManyIterationsNewton(b, max_iter, f(b));
		}
